PBFT：Practical Byzantine Fault Tolerance，实用拜占庭容错
在分布式计算上，不同的计算机透过讯息交换，尝试达成共识；但有时候，
系统上协调计算机（Coordinator / Commander）或成员计算机 （Member /Lieutanent）可能因系统错误并交换错的讯息，导致影响最终的系统一致性。
拜占庭将军问题就根据错误计算机的数量，寻找可能的解决办法，这无法找到一个绝对的答案，但只可以用来验证一个机制的有效程度。

而拜占庭问题的可能解决方法为：
在 N ≥ 3F + 1 的情况下一致性是可能解决。其中，N为计算机总数，F为有问题计算机总数。
信息在计算机间互相交换后，各计算机列出所有得到的信息，以大多数的结果作为解决办法。
最早由 Castro 和 Liskov 在 1999 年提出的 Practical Byzantine Fault Tolerant（PBFT）是第一个得到广泛应用的 BFT 算法。
只要系统中有2/3的节点是正常工作的，则可以保证一致性。

PBFT算法的总体过程如下：
客户端向主节点发送请求调用服务操作：

客户端c向主节点发送<REQUEST,o,t,c>请求执行状态机操作o，这里时间戳t用来保证客户端请求只会执行一次。
每个由副本节点发给客户端的消息都包含了当前的视图编号，使得客户端能够跟踪视图编号，从而进一步推算出当前主节点的编号。
客户端通过点对点消息向它自己认为的主节点发送请求，然后主节点自动将该请求向所有备份节点进行广播。
视图是连续编号的整数。主节点由公式p = v mod |R|计算得到，这里v是视图编号，p是副本编号，|R|是副本集合的个数。
副本发给客户端的响应为<REPLY,v,t,c,i,r>，v是视图编号，t是时间戳，i是副本的编号，r是请求执行的结果。
主节点通过广播将请求发送给其他副本，然后就开始进行三段任务：

预准备阶段：
主节点分配一个序列号n给收到的请求，然后向所有备份节点群发预准备消息，预准备消息的格式为<<PRE-PREPARE,v,n,d>,m>，这里v是视图编号，
m是客户端发送的请求消息，d是请求消息m的摘要。

准备阶段：
如果备份节点i接受了预准备消息<<PRE-PREPARE,v,n,d>,m>，则进入准备阶段。在准备阶段的同时，该节点向所有副本节点发送准备消息<PREPARE,v,n,d,i>，
并且将预准备消息和准备消息写入自己的消息日志。如果看预准备消息不顺眼，就什么都不做。

确认阶段：
当(m,v,n,i)条件为真的时候，副本i将<COMMIT,v,n,D(m),i>向其他副本节点广播，于是就进入了确认阶段。
所有副本都执行请求并将结果发回客户端。
客户端需要等待f+1个不同副本节点发回相同的结果，作为整个操作的最终结果：
如果客户端没有在有限时间内收到回复，请求将向所有副本节点进行广播。如果请求已经在副本节点处理过了，副本就向客户端重发一遍执行结果。
如果请求没有在副本节点处理过，该副本节点将把请求转发给主节点。如果主节点没有将该请求进行广播，那么就有认为主节点失效，
如果有足够多的副本节点认为主节点失效，则会触发一次视图变更。

下图展示了在没有发生主节点失效的情况下算法的正常执行流程，其中副本0是主节点，副本3是失效节点，而C是客户端：

与Paxos类似，PBFT也是一种采用许可投票、少数服从多数来选举领导者进行记账的共识机制，但该共识机制允许拜占庭容错。
该共识机制允许强监管节点参与，具备权限分级能力，性能更高，耗能更低，该算法每轮记账都会由全网节点共同选举领导者，
允许33%的节点作恶，容错性为33%25。因为特别适合联盟链的应用场景，PBFT及其改进算法称为目前被使用最多的联盟链共识算法。
改进主要集中在，修改底层网络拓扑的要求，使用p2p网络；可以动态的调整节点数量；减少协议使用的消息数量等。

应用案例：
布萌：布萌采用的共识算法也是PBFT。

有关PBFT的资料：
区块链核心技术：拜占庭共识算法之PBFT：这篇文章通俗易通地讲述了PBFT的原理，推荐给想大概了解一下PBFT是怎么回事的人阅读。